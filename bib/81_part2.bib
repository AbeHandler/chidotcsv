@inproceedings{10.1145/800276.810953,
author = {Relles, N. and Sondheimer, N. K. and Ingargiola, G. P.},
title = {Recent Advances in User Assistance},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810953},
doi = {10.1145/800276.810953},
abstract = {As interactive users find conventional methods of training and documentation inadequate,
designers are providing systems with online reference information, descriptions of
valid input, elaboration of error messages, and explanations of a system's behavior.
This paper describes some existing commercial systems that offer online assistance
and more experimental approaches by the research community. The following material
was originally presented at the SIGSOC conference on Easier and More Productive Use
of Computing Systems. An extended version will appear in a special issue of the IEEE
Transactions on Systems, Man, and Cybernetics (Volume SMC-12, March/April, 1982),
and is reprinted here with the permission of the IEEE.Online user assistance is now
offered on commercial systems and is the subject of investigation in experimental
settings. It is difficult to compare the advantages and limitations of different approaches
because they vary along many dimensions and because there is no commonly accepted
terminology. A grouping of these dimensions into major categories is a necessary first
step towards more empirical evaluations. The major software-related features of online
assistance appear to fall into four categories:• access method -- the way users
can construct or enter requests for assistance;• data structure -- the manner
in which different portions of assistance information are related to each other;•
software architecture -- how assistance requests and their responses are communicated
among a user, an operating system, application programs, and the assistance database;
and• contextual knowledge -- how much information is retained about the assistance
environment, including the user, the application, and the tasks being performed.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {1–5},
numpages = {5},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810953,
author = {Relles, N. and Sondheimer, N. K. and Ingargiola, G. P.},
title = {Recent Advances in User Assistance},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810953},
doi = {10.1145/1015579.810953},
abstract = {As interactive users find conventional methods of training and documentation inadequate,
designers are providing systems with online reference information, descriptions of
valid input, elaboration of error messages, and explanations of a system's behavior.
This paper describes some existing commercial systems that offer online assistance
and more experimental approaches by the research community. The following material
was originally presented at the SIGSOC conference on Easier and More Productive Use
of Computing Systems. An extended version will appear in a special issue of the IEEE
Transactions on Systems, Man, and Cybernetics (Volume SMC-12, March/April, 1982),
and is reprinted here with the permission of the IEEE.Online user assistance is now
offered on commercial systems and is the subject of investigation in experimental
settings. It is difficult to compare the advantages and limitations of different approaches
because they vary along many dimensions and because there is no commonly accepted
terminology. A grouping of these dimensions into major categories is a necessary first
step towards more empirical evaluations. The major software-related features of online
assistance appear to fall into four categories:• access method -- the way users
can construct or enter requests for assistance;• data structure -- the manner
in which different portions of assistance information are related to each other;•
software architecture -- how assistance requests and their responses are communicated
among a user, an operating system, application programs, and the assistance database;
and• contextual knowledge -- how much information is retained about the assistance
environment, including the user, the application, and the tasks being performed.},
journal = {SIGSOC Bull.},
month = may,
pages = {1–5},
numpages = {5}
}

@inproceedings{10.1145/800276.810954,
author = {Hayes, Philip J. and Glasner, Ingrid D.},
title = {Automatic Construction of Explanation Networks for a Cooperative User Interface},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810954},
doi = {10.1145/800276.810954},
abstract = {This paper is concerned with providing automatically generated on-line explanations
to the user of a functional computer subsystem or tool about what the tool can and
cannot do, what parameters and options are available or required with a given command,
etc.. The explanations are given through the COUSIN interface system which provides
a cooperative tool-independent user interface for tools whose objects, operations,
input syntax, display formats, etc. are declaratively represented in a tool description
data base. The explanations are produced automatically from this data base, with no
incremental effort on the part of the tool designer, and in a single uniform style
for any tool that uses COUSIN as its interface. The explanation facility takes the
form of a fine-grained, tightly linked network of text frames supported by the ZOG
menu-selection system. Exactly what information the net building program, NB, extracts
from a tool description, and the way in which this information is formatted in the
text frames is controlled by a second declarative data base called the aspect description.
The declarative nature of the aspect description makes it easy to adapt NB to changes
in and extensions to the tool description formalism, and to experiment with the structure
of the explanation network. We also describe how the appropriate network frame can
be found and displayed in response to specific explanation requests from the user.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {6–14},
numpages = {9},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810954,
author = {Hayes, Philip J. and Glasner, Ingrid D.},
title = {Automatic Construction of Explanation Networks for a Cooperative User Interface},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810954},
doi = {10.1145/1015579.810954},
abstract = {This paper is concerned with providing automatically generated on-line explanations
to the user of a functional computer subsystem or tool about what the tool can and
cannot do, what parameters and options are available or required with a given command,
etc.. The explanations are given through the COUSIN interface system which provides
a cooperative tool-independent user interface for tools whose objects, operations,
input syntax, display formats, etc. are declaratively represented in a tool description
data base. The explanations are produced automatically from this data base, with no
incremental effort on the part of the tool designer, and in a single uniform style
for any tool that uses COUSIN as its interface. The explanation facility takes the
form of a fine-grained, tightly linked network of text frames supported by the ZOG
menu-selection system. Exactly what information the net building program, NB, extracts
from a tool description, and the way in which this information is formatted in the
text frames is controlled by a second declarative data base called the aspect description.
The declarative nature of the aspect description makes it easy to adapt NB to changes
in and extensions to the tool description formalism, and to experiment with the structure
of the explanation network. We also describe how the appropriate network frame can
be found and displayed in response to specific explanation requests from the user.},
journal = {SIGSOC Bull.},
month = may,
pages = {6–14},
numpages = {9}
}

@inproceedings{10.1145/800276.810955,
author = {Price, Lynne A.},
title = {Using Offline Documentation Online},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810955},
doi = {10.1145/800276.810955},
abstract = {Current interactive programs usually provide some form of online documentation in
addition to the traditional hard-copy user's manual. To save the expense of writing
two documents covering the same material, it is not uncommon to find offline manuals
that are available interactively as well as printed versions of material originally
organized for online use. Because of the difficulties inherent in using the same material
in different ways, neither approach is totally satisfactory. The THUMB system minimizes
these problems by structuring offline documentation for interactive use. An expert
on a particular text (e.g., its author) prepares a detailed representation of the
organization of material within the document. Once this data structure (which resembles
a thorough table of contents and heavily cross-referenced index) is available, users
access information free from the strictures of linear text, simple indices, and page
numbers. The expert's task is nontrivial, but it requires less effort than writing
a new document. Creation and revision of text are made easy by supportive utilities.
THUMB monitors reader's requests in order to provide experts with feedback about a
document's use. Readers need not be aware of THUMB's underlying data structure or
the tools available for experts.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {15–20},
numpages = {6},
keywords = {Online assistance, Text structure, User interface, Word processing, Documentation},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810955,
author = {Price, Lynne A.},
title = {Using Offline Documentation Online},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810955},
doi = {10.1145/1015579.810955},
abstract = {Current interactive programs usually provide some form of online documentation in
addition to the traditional hard-copy user's manual. To save the expense of writing
two documents covering the same material, it is not uncommon to find offline manuals
that are available interactively as well as printed versions of material originally
organized for online use. Because of the difficulties inherent in using the same material
in different ways, neither approach is totally satisfactory. The THUMB system minimizes
these problems by structuring offline documentation for interactive use. An expert
on a particular text (e.g., its author) prepares a detailed representation of the
organization of material within the document. Once this data structure (which resembles
a thorough table of contents and heavily cross-referenced index) is available, users
access information free from the strictures of linear text, simple indices, and page
numbers. The expert's task is nontrivial, but it requires less effort than writing
a new document. Creation and revision of text are made easy by supportive utilities.
THUMB monitors reader's requests in order to provide experts with feedback about a
document's use. Readers need not be aware of THUMB's underlying data structure or
the tools available for experts.},
journal = {SIGSOC Bull.},
month = may,
pages = {15–20},
numpages = {6},
keywords = {Text structure, Documentation, Word processing, User interface, Online assistance}
}

@inproceedings{10.1145/800276.810956,
author = {Ballard, Bruce W.},
title = {How Shall We Evaluate Prototype Natural Language Processors?},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810956},
doi = {10.1145/800276.810956},
abstract = {Recent years have seen important advances in computational linguistics and artificial
intelligence. Although many problems remain, the goal of providing limited English-processing
facilities for non-technical computer users is within sight. By the end of the decade,
numerous systems providing limited coverage of "natural language" will be available
for business and home use. Several systems (e.g. TQA [16]) have already become operational.
One system (ROBOT [7]) has been supporting natural language inputs in a dozen or so
different commercial database applications for at least three years. Many other systems
have been developed to the prototype stage and will soon be able to be transferred,
with varying degrees of effort, from a research to a production environment. Each
system tends to provide special features of its own, and the future prospects for
database, office, instructional, and other environments are quite exciting.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {21–26},
numpages = {6},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810956,
author = {Ballard, Bruce W.},
title = {How Shall We Evaluate Prototype Natural Language Processors?},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810956},
doi = {10.1145/1015579.810956},
abstract = {Recent years have seen important advances in computational linguistics and artificial
intelligence. Although many problems remain, the goal of providing limited English-processing
facilities for non-technical computer users is within sight. By the end of the decade,
numerous systems providing limited coverage of "natural language" will be available
for business and home use. Several systems (e.g. TQA [16]) have already become operational.
One system (ROBOT [7]) has been supporting natural language inputs in a dozen or so
different commercial database applications for at least three years. Many other systems
have been developed to the prototype stage and will soon be able to be transferred,
with varying degrees of effort, from a research to a production environment. Each
system tends to provide special features of its own, and the future prospects for
database, office, instructional, and other environments are quite exciting.},
journal = {SIGSOC Bull.},
month = may,
pages = {21–26},
numpages = {6}
}

@inproceedings{10.1145/800276.810957,
author = {Martin, Thomas H.},
title = {Redesign of the User Interface Involving Users of a Large Operational Real-Time System},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810957},
doi = {10.1145/800276.810957},
abstract = {Today many large systems exist which have had many designers, have been patched up
over the years, were designed for a different type of user than current users, and
were once (but no longer) state of the art. The Deep Space Network at Jet Propulsion
Laboratory is such a system. In Australia, Spain, and California, operators of the
system use inflexible, incompatible routines to route data to Pasadena. Worker motivation
and accuracy have to remain high for the system to work. In an attempt to develop
redesign guidelines, users were queried regarding their attitudes and difficulties
with the system. Interface alternatives were isolated and incorporated into a prototype
for assessing the impact of the alternatives on user behavior. The resulting guidelines
form a user-oriented, experience-based basis for continuing system evolution.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {27–30},
numpages = {4},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810957,
author = {Martin, Thomas H.},
title = {Redesign of the User Interface Involving Users of a Large Operational Real-Time System},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810957},
doi = {10.1145/1015579.810957},
abstract = {Today many large systems exist which have had many designers, have been patched up
over the years, were designed for a different type of user than current users, and
were once (but no longer) state of the art. The Deep Space Network at Jet Propulsion
Laboratory is such a system. In Australia, Spain, and California, operators of the
system use inflexible, incompatible routines to route data to Pasadena. Worker motivation
and accuracy have to remain high for the system to work. In an attempt to develop
redesign guidelines, users were queried regarding their attitudes and difficulties
with the system. Interface alternatives were isolated and incorporated into a prototype
for assessing the impact of the alternatives on user behavior. The resulting guidelines
form a user-oriented, experience-based basis for continuing system evolution.},
journal = {SIGSOC Bull.},
month = may,
pages = {27–30},
numpages = {4}
}

@inproceedings{10.1145/800276.810958,
author = {Borman, Lorraine and Karr, Rosemary},
title = {Evaluating the “Friendliness” of a Timesharing System},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810958},
doi = {10.1145/800276.810958},
abstract = {The decade of the Sixties served to introduce most university campuses to the computer;
the Seventies brought the computer, via a terminal, into every facet of university
life. Computing in the Eighties will cause every university and college to evaluate
and reconsider its exploitation of modern computing equipment for education and research.For
example, at Northwestern University, it was recognized that continued growth in timesharing
would be a major factor in computing at NU in the 1980s and that this growth would
come from a large community of new users and of casual users. In January 1980, the
Computing Center began a long-range planning study. A five-year equipment enhancement
and replacement plan was to be developed which was intended to reverse an unsatisfactory
trend toward computer saturation, to further improve and modernize our computer offerings,
and to ensure that NU remained on a path of excellence in computing. Since time-sharing
had already increased to over 50% of the total usage of the computer, a decision was
made to begin the evaluation of modern timesharing systems, with special emphasis
in two areas: 1) efficiency and reliability, and 2) the user interface.This paper
describes the processes which were developed and used for the evaluation of the user
interface, or as it came to be known, the "friendliness" study [1].},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {31–34},
numpages = {4},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810958,
author = {Borman, Lorraine and Karr, Rosemary},
title = {Evaluating the “Friendliness” of a Timesharing System},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810958},
doi = {10.1145/1015579.810958},
abstract = {The decade of the Sixties served to introduce most university campuses to the computer;
the Seventies brought the computer, via a terminal, into every facet of university
life. Computing in the Eighties will cause every university and college to evaluate
and reconsider its exploitation of modern computing equipment for education and research.For
example, at Northwestern University, it was recognized that continued growth in timesharing
would be a major factor in computing at NU in the 1980s and that this growth would
come from a large community of new users and of casual users. In January 1980, the
Computing Center began a long-range planning study. A five-year equipment enhancement
and replacement plan was to be developed which was intended to reverse an unsatisfactory
trend toward computer saturation, to further improve and modernize our computer offerings,
and to ensure that NU remained on a path of excellence in computing. Since time-sharing
had already increased to over 50% of the total usage of the computer, a decision was
made to begin the evaluation of modern timesharing systems, with special emphasis
in two areas: 1) efficiency and reliability, and 2) the user interface.This paper
describes the processes which were developed and used for the evaluation of the user
interface, or as it came to be known, the "friendliness" study [1].},
journal = {SIGSOC Bull.},
month = may,
pages = {31–34},
numpages = {4}
}

@inproceedings{10.1145/800276.810959,
author = {Ke, Jyh-Sheng and Chang, Shi-kuo},
title = {Evolution of a Query Translation System},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810959},
doi = {10.1145/800276.810959},
abstract = {This paper presents the motivation, history, and idiosyncrasy of a query translation
system. Detail of the translation process has also been described.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {35–41},
numpages = {7},
keywords = {Conceptual graph, Fuzzy query, Database skeleton, Query graph, Relational database},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810959,
author = {Ke, Jyh-Sheng and Chang, Shi-kuo},
title = {Evolution of a Query Translation System},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810959},
doi = {10.1145/1015579.810959},
abstract = {This paper presents the motivation, history, and idiosyncrasy of a query translation
system. Detail of the translation process has also been described.},
journal = {SIGSOC Bull.},
month = may,
pages = {35–41},
numpages = {7},
keywords = {Fuzzy query, Query graph, Conceptual graph, Database skeleton, Relational database}
}

@inproceedings{10.1145/800276.810960,
author = {Penniman, W. David},
title = {The Need for Quantitative Measurement of On-Line User Behavior},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810960},
doi = {10.1145/800276.810960},
abstract = {An argument is made for the systematic collection and analysis of data regarding user-computer
interaction in an on-line setting. A suggested approach involving preliminary data
collection/analysis, development of a conceptual framework or model, and validation
of the model is described. The case for this approach is supported by presentation
of some preliminary results from a study of monitor data collected from the National
Library of Medicine's ELHILL transaction file. Follow-on steps are proposed including
comparison of research results to other studies of the same system or studies using
similar techniques.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {42–45},
numpages = {4},
keywords = {On-line monitoring, Transaction logs, User behavior},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810960,
author = {Penniman, W. David},
title = {The Need for Quantitative Measurement of On-Line User Behavior},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810960},
doi = {10.1145/1015579.810960},
abstract = {An argument is made for the systematic collection and analysis of data regarding user-computer
interaction in an on-line setting. A suggested approach involving preliminary data
collection/analysis, development of a conceptual framework or model, and validation
of the model is described. The case for this approach is supported by presentation
of some preliminary results from a study of monitor data collected from the National
Library of Medicine's ELHILL transaction file. Follow-on steps are proposed including
comparison of research results to other studies of the same system or studies using
similar techniques.},
journal = {SIGSOC Bull.},
month = may,
pages = {42–45},
numpages = {4},
keywords = {Transaction logs, User behavior, On-line monitoring}
}

@inproceedings{10.1145/800276.810961,
author = {Teitel, Robert F.},
title = {A Statistical User Interface for the Relational Model of Data},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810961},
doi = {10.1145/800276.810961},
abstract = {In the decade since the introduction of the Relational Model as a user view of large
stored data bases, a variety of user languages have been proposed and a number of
experimental systems have been implemented. The current computer science literature
is replete with papers on the theoretical and practical aspects of the Relational
Model and its implementation, as are most recent texts on data management systems.Implicit
in the design of the user languages of most database systems, including those based
on the Relational Model, are assumptions regarding the patterns of access to and the
usage of the content of the database. Somewhat oversimplified, the assumed pattern
of access is to search for a particular occurrence (case, observation) in the database
which satisfies a given condition, and then to display the values of all attributes
(fields, variables) of that one occurrence. The languages are designed to permit users
to pose queries such as, for example, "what widgets do we buy from ABC industries?"
or "display Jones' employment history". Queries of this type are termed informational
queries; and systems supporting such queries with appropriate user languages and internal
data storage techniques and access methods are information systems.A statistical query,
similarly oversimplified, specifies a pattern of access to most, if not all, of the
occurrences in a database, and a usage pattern of at most a few of the attributes.
Examples of statistical queries are "what is the average size of our purchase orders?"
and "display the number of employees by race, sex, and job category". Current statistical
systems have limited capability for performing analysis over large and complex data
collections, and their user languages reflects this limitation. A statistical query,
as defined here, need not involve sophisticated mathematical analysis; the distinction
between informational and statistical is derived from the antithetical patterns of
access to and usage of the data content of a database. Most work on access languages
for relationally based data systems has been on information query languages; very
little work has been done on statistical query languages.This paper, then, discusses
some elements of a language for statistical queries for a data system employing the
Relational Model as the user view of large stored data bases.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {46–52},
numpages = {7},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810961,
author = {Teitel, Robert F.},
title = {A Statistical User Interface for the Relational Model of Data},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810961},
doi = {10.1145/1015579.810961},
abstract = {In the decade since the introduction of the Relational Model as a user view of large
stored data bases, a variety of user languages have been proposed and a number of
experimental systems have been implemented. The current computer science literature
is replete with papers on the theoretical and practical aspects of the Relational
Model and its implementation, as are most recent texts on data management systems.Implicit
in the design of the user languages of most database systems, including those based
on the Relational Model, are assumptions regarding the patterns of access to and the
usage of the content of the database. Somewhat oversimplified, the assumed pattern
of access is to search for a particular occurrence (case, observation) in the database
which satisfies a given condition, and then to display the values of all attributes
(fields, variables) of that one occurrence. The languages are designed to permit users
to pose queries such as, for example, "what widgets do we buy from ABC industries?"
or "display Jones' employment history". Queries of this type are termed informational
queries; and systems supporting such queries with appropriate user languages and internal
data storage techniques and access methods are information systems.A statistical query,
similarly oversimplified, specifies a pattern of access to most, if not all, of the
occurrences in a database, and a usage pattern of at most a few of the attributes.
Examples of statistical queries are "what is the average size of our purchase orders?"
and "display the number of employees by race, sex, and job category". Current statistical
systems have limited capability for performing analysis over large and complex data
collections, and their user languages reflects this limitation. A statistical query,
as defined here, need not involve sophisticated mathematical analysis; the distinction
between informational and statistical is derived from the antithetical patterns of
access to and usage of the data content of a database. Most work on access languages
for relationally based data systems has been on information query languages; very
little work has been done on statistical query languages.This paper, then, discusses
some elements of a language for statistical queries for a data system employing the
Relational Model as the user view of large stored data bases.},
journal = {SIGSOC Bull.},
month = may,
pages = {46–52},
numpages = {7}
}

@inproceedings{10.1145/800276.810962,
author = {Land, Richard I.},
title = {Keyboard Entry - Can It Be Simplified?},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810962},
doi = {10.1145/800276.810962},
abstract = {The present keyboard arrangement cannot be defended as comfortable, logically arranged,
or optimized for human efficiency. Information theory based experiments suggest measures
for alternative arrangements. Character sets used in different tasks can be expected
to yield different optimal key locations. New tasks are introducing new characters
and changing the frequency of selected old ones. Numerous alternative arrangements
for alphanumeric fingered entry have been designed, but none are supported by conclusive
testing. The amateur keyboard user far outnumbers the professional. Computer entry
and word-processors are overtaking the simple typewriter as common alphanumeric stroke
entry devices. Compromise and selection of a simplified keyboard that is compatible
with present mechanical and electronic designs is advocated.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {53–58},
numpages = {6},
keywords = {Typewriter, Typing, Terminal design, Keyboard},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810962,
author = {Land, Richard I.},
title = {Keyboard Entry - Can It Be Simplified?},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810962},
doi = {10.1145/1015579.810962},
abstract = {The present keyboard arrangement cannot be defended as comfortable, logically arranged,
or optimized for human efficiency. Information theory based experiments suggest measures
for alternative arrangements. Character sets used in different tasks can be expected
to yield different optimal key locations. New tasks are introducing new characters
and changing the frequency of selected old ones. Numerous alternative arrangements
for alphanumeric fingered entry have been designed, but none are supported by conclusive
testing. The amateur keyboard user far outnumbers the professional. Computer entry
and word-processors are overtaking the simple typewriter as common alphanumeric stroke
entry devices. Compromise and selection of a simplified keyboard that is compatible
with present mechanical and electronic designs is advocated.},
journal = {SIGSOC Bull.},
month = may,
pages = {53–58},
numpages = {6},
keywords = {Typing, Typewriter, Keyboard, Terminal design}
}

@inproceedings{10.1145/800276.810963,
author = {Evans, R. and Fiddian, N. J. and Gray, W. A.},
title = {Adaptable User Interfaces for Portable, Interactive Computing Software Systems},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810963},
doi = {10.1145/800276.810963},
abstract = {In the context of this paper a computing software system consists of a database, an
associated user interface which allows users to analyse the data and the routines
or programs which implement the analytic functions available through the user interface.
It is assumed that the complete system - source code and data - already exists in
a form which is as easily portable as possible between different computer environments.
For such systems adaptability is the problem of adjusting the user interface and analytic
capabilities to suit different user communities when such a system is transferred
from one environment to another. This may include adaptation to specific hardware
facilities as well as user requirements.In 1977/8 the International Planned Parenthood
Federation (IPPF) funded a project at University College Cardiff to implement a portable
computing software system originating from the Population Dynamics Group (PDG) at
the University of Illinois. This system allowed users to perform population projections
under different demographic conditions showing in a graphical presentation how the
population of a country varies over selected time spans. The database consisted of
population statistics for a number of countries. When implemented at Cardiff it was
intended that this system should be used as a demographic training aid by the post
graduate diploma students in the David Owen Centre for Population Growth Studies.
These students are an international group who are specialists in the field of demography
but have little or no computing background.This paper will discuss briefly how this
portable system was implemented on a PDP 11 minicomputer at Cardiff and then give
a fuller description of the adaptation of the user interface and analytic capabilities
to the local community and its computer facilities. General conclusions will be drawn
as to how such systems should be written so as to ease the problems of adaptability.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {59–64},
numpages = {6},
keywords = {Interactive systems, Demography, User interface, Teaching aid, Portability, Adaptability},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810963,
author = {Evans, R. and Fiddian, N. J. and Gray, W. A.},
title = {Adaptable User Interfaces for Portable, Interactive Computing Software Systems},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810963},
doi = {10.1145/1015579.810963},
abstract = {In the context of this paper a computing software system consists of a database, an
associated user interface which allows users to analyse the data and the routines
or programs which implement the analytic functions available through the user interface.
It is assumed that the complete system - source code and data - already exists in
a form which is as easily portable as possible between different computer environments.
For such systems adaptability is the problem of adjusting the user interface and analytic
capabilities to suit different user communities when such a system is transferred
from one environment to another. This may include adaptation to specific hardware
facilities as well as user requirements.In 1977/8 the International Planned Parenthood
Federation (IPPF) funded a project at University College Cardiff to implement a portable
computing software system originating from the Population Dynamics Group (PDG) at
the University of Illinois. This system allowed users to perform population projections
under different demographic conditions showing in a graphical presentation how the
population of a country varies over selected time spans. The database consisted of
population statistics for a number of countries. When implemented at Cardiff it was
intended that this system should be used as a demographic training aid by the post
graduate diploma students in the David Owen Centre for Population Growth Studies.
These students are an international group who are specialists in the field of demography
but have little or no computing background.This paper will discuss briefly how this
portable system was implemented on a PDP 11 minicomputer at Cardiff and then give
a fuller description of the adaptation of the user interface and analytic capabilities
to the local community and its computer facilities. General conclusions will be drawn
as to how such systems should be written so as to ease the problems of adaptability.},
journal = {SIGSOC Bull.},
month = may,
pages = {59–64},
numpages = {6},
keywords = {Demography, Interactive systems, Teaching aid, Adaptability, User interface, Portability}
}

@inproceedings{10.1145/800276.810964,
author = {Roistacher, Richard C.},
title = {User Consulting in Three Forms of Network-Based Organization},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810964},
doi = {10.1145/800276.810964},
abstract = {The utility of computer networking to organizal tasks is discussed. Three forms of
network organization are described, and some examples given. Problems of user consulting
in each form of organization are discussed.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {65–68},
numpages = {4},
keywords = {Consulting, Organizations, Networks},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810964,
author = {Roistacher, Richard C.},
title = {User Consulting in Three Forms of Network-Based Organization},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810964},
doi = {10.1145/1015579.810964},
abstract = {The utility of computer networking to organizal tasks is discussed. Three forms of
network organization are described, and some examples given. Problems of user consulting
in each form of organization are discussed.},
journal = {SIGSOC Bull.},
month = may,
pages = {65–68},
numpages = {4},
keywords = {Organizations, Consulting, Networks}
}

@inproceedings{10.1145/800276.810965,
author = {Cercone, Nick and Krause, Max and Boates, John},
title = {Lexicon Design Using Perfect Hash Functions},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810965},
doi = {10.1145/800276.810965},
abstract = {The research reported in this paper derives from the recent algorithm of Cichelli
(1980) for computing machine-independent, minimal perfect hash functions of the form:hash
value: hash key length + associated value of the key's first letter + associated value
of the key's last letterA minimal perfect hash function is one which provides single
probe retrieval from a minimally-sized table of hash identifiers [ keys]. Cichelli's
hash function is machine-independent because the character code used by a particular
machine never enters into the hash calculation.Cichelli's algorithm uses a simple
backtracking process to find an assignment of non-negative integers to letters which
results in a perfect minimal hash function. Cichelli employs a twofold ordering strategy
which rearranges the static set of keys in such a way that hash value collisions will
occur and be resolved as early as possible during the backtracking process. This double
ordering provides a necessary reduction in the size of the potentially large search
space, thus considerably speeding the computation of associated values.In spite of
Cichelli's ordering strategies, his method is found to require excessive computation
to find hash functions for sets of keys with more than about 40 members. Cichelli's
method is also limited since two keys with the same first and last letters and the
same length are not permitted.Alternative algorithms and their implementations will
be discussed in the next section; these algorithms overcome some of the difficulties
encountered when using Cichelli's original algorithm. Some experimental results are
presented, followed by a discussion of the application of perfect hash functions to
the problem of natural language lexicon design.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {69–78},
numpages = {10},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810965,
author = {Cercone, Nick and Krause, Max and Boates, John},
title = {Lexicon Design Using Perfect Hash Functions},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810965},
doi = {10.1145/1015579.810965},
abstract = {The research reported in this paper derives from the recent algorithm of Cichelli
(1980) for computing machine-independent, minimal perfect hash functions of the form:hash
value: hash key length + associated value of the key's first letter + associated value
of the key's last letterA minimal perfect hash function is one which provides single
probe retrieval from a minimally-sized table of hash identifiers [ keys]. Cichelli's
hash function is machine-independent because the character code used by a particular
machine never enters into the hash calculation.Cichelli's algorithm uses a simple
backtracking process to find an assignment of non-negative integers to letters which
results in a perfect minimal hash function. Cichelli employs a twofold ordering strategy
which rearranges the static set of keys in such a way that hash value collisions will
occur and be resolved as early as possible during the backtracking process. This double
ordering provides a necessary reduction in the size of the potentially large search
space, thus considerably speeding the computation of associated values.In spite of
Cichelli's ordering strategies, his method is found to require excessive computation
to find hash functions for sets of keys with more than about 40 members. Cichelli's
method is also limited since two keys with the same first and last letters and the
same length are not permitted.Alternative algorithms and their implementations will
be discussed in the next section; these algorithms overcome some of the difficulties
encountered when using Cichelli's original algorithm. Some experimental results are
presented, followed by a discussion of the application of perfect hash functions to
the problem of natural language lexicon design.},
journal = {SIGSOC Bull.},
month = may,
pages = {69–78},
numpages = {10}
}

@inproceedings{10.1145/800276.810966,
author = {Fiddian, N. J. and Gray, W. A. and Read, M. W.},
title = {Designing SENSE (a Software Environment for Social Science REsearch): The Role of Software Tools},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810966},
doi = {10.1145/800276.810966},
abstract = {In most general purpose computer systems there is a wide variety
of software available to users. Such software is usually provided
in one of three organisational forms - routines in a library;
collections of related functions grouped in a package with a common
interface; independent programs called through operating system
commands. This interdependent tripartite structure creates problems
for non-sophisticated users as it involves different levels of user
interface complexity.At the routine level a user must write
programs in an appropriate host programming language to use the
software. If he wishes to use a selection of routines written in
incompatible languages then he may have to familiarise himself with
more than one host language. In each language he must be aware of
the calling conventions for routines, the possible representations
of various types of data, the methods of passing parameters and the
ways of inputting and outputting data to and from the external
environment. This type of interface occurs with libraries like NAG
and IMSL.In the case of packages the imperative user interface is usually
somewhat simpler, consisting essentially of a name identifying the
function required and some associated parameters which identify
variables, labels, files, options, control and code values, etc as
appropriate. However, function calls of this form must normally be
preceded by a non-trivial amount of declarative and other "red
tape" information expressed in the package interface language.
Also, package environments can be restrictive in that the user is
constrained to the types of data structure and analysis supported
by the chosen package unless he is prepared to write programs to
transform his data for other packages or to analyse it
independently. SPSS is typical of this kind of package.When software facilities are
provided at the program level, the
user interface often consists simply of one-line program invocation
commands written in the local operating system's command language,
with program options and data files identified by command
parameters. Common examples of such facilities are sort and
archiving programs. A program level interface becomes even simpler,
and at the same time more powerful, if command sequences can be
formed into parameterised command procedures and if programs are
enabled to conmlunicate directly with one another without the need
for explicit intermediate files.In the latter type of environment the application
software user
generally finds that there are analytic program tools available to
meet only some of his requirements. Consequently he has to embrace
either or both of the other levels in addition in order to increase
the analytic power available to him. Transfer between levels is not
easily accomplished in most systems as facilities do not normally
exist to help the user move data between levels. This difficulty
comes on top of the obvious problem of having to master more than
one interface and more than one level of complexity.In the SENSE project (11), which
is funded by the U.K. Social
Science Research Council, we are creating a prototype computing
environment for social science researchers which can accommodate
non-sophisticated users. The aim is to provide an integrated
environment where such users will have a complete range of
application software available (packages, routines and programs)
through a single, simple user interface. We believe that this can
be achieved by exploiting and extending the concept of software
tools propounded by Kernighan and Plauger (19), so that as far as
possible all software can be used through a program level
interface, with its attendant advantages. Following Kernighan and
Plauger we believe that software tools "can be used to create a
comfortable and effective interface to existing programs", as well
as providing an ideal model for the structuring of brand new
application software. This paper will consider various aspects of
the initial design of the SENSE software environment with
particular reference to the importance of software tools in that
design.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {79–85},
numpages = {7},
keywords = {User interface, Software tools, Software environment integration},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810966,
author = {Fiddian, N. J. and Gray, W. A. and Read, M. W.},
title = {Designing SENSE (a Software Environment for Social Science REsearch): The Role of Software Tools},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810966},
doi = {10.1145/1015579.810966},
abstract = {In most general purpose computer systems there is a wide variety
of software available to users. Such software is usually provided
in one of three organisational forms - routines in a library;
collections of related functions grouped in a package with a common
interface; independent programs called through operating system
commands. This interdependent tripartite structure creates problems
for non-sophisticated users as it involves different levels of user
interface complexity.At the routine level a user must write
programs in an appropriate host programming language to use the
software. If he wishes to use a selection of routines written in
incompatible languages then he may have to familiarise himself with
more than one host language. In each language he must be aware of
the calling conventions for routines, the possible representations
of various types of data, the methods of passing parameters and the
ways of inputting and outputting data to and from the external
environment. This type of interface occurs with libraries like NAG
and IMSL.In the case of packages the imperative user interface is usually
somewhat simpler, consisting essentially of a name identifying the
function required and some associated parameters which identify
variables, labels, files, options, control and code values, etc as
appropriate. However, function calls of this form must normally be
preceded by a non-trivial amount of declarative and other "red
tape" information expressed in the package interface language.
Also, package environments can be restrictive in that the user is
constrained to the types of data structure and analysis supported
by the chosen package unless he is prepared to write programs to
transform his data for other packages or to analyse it
independently. SPSS is typical of this kind of package.When software facilities are
provided at the program level, the
user interface often consists simply of one-line program invocation
commands written in the local operating system's command language,
with program options and data files identified by command
parameters. Common examples of such facilities are sort and
archiving programs. A program level interface becomes even simpler,
and at the same time more powerful, if command sequences can be
formed into parameterised command procedures and if programs are
enabled to conmlunicate directly with one another without the need
for explicit intermediate files.In the latter type of environment the application
software user
generally finds that there are analytic program tools available to
meet only some of his requirements. Consequently he has to embrace
either or both of the other levels in addition in order to increase
the analytic power available to him. Transfer between levels is not
easily accomplished in most systems as facilities do not normally
exist to help the user move data between levels. This difficulty
comes on top of the obvious problem of having to master more than
one interface and more than one level of complexity.In the SENSE project (11), which
is funded by the U.K. Social
Science Research Council, we are creating a prototype computing
environment for social science researchers which can accommodate
non-sophisticated users. The aim is to provide an integrated
environment where such users will have a complete range of
application software available (packages, routines and programs)
through a single, simple user interface. We believe that this can
be achieved by exploiting and extending the concept of software
tools propounded by Kernighan and Plauger (19), so that as far as
possible all software can be used through a program level
interface, with its attendant advantages. Following Kernighan and
Plauger we believe that software tools "can be used to create a
comfortable and effective interface to existing programs", as well
as providing an ideal model for the structuring of brand new
application software. This paper will consider various aspects of
the initial design of the SENSE software environment with
particular reference to the importance of software tools in that
design.},
journal = {SIGSOC Bull.},
month = may,
pages = {79–85},
numpages = {7},
keywords = {Software tools, Software environment integration, User interface}
}

@inproceedings{10.1145/800276.810967,
author = {Gadol, Steve D. and Loebner, Egon E.},
title = {Building and Accessing an REL Database},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810967},
doi = {10.1145/800276.810967},
abstract = {This paper discusses the construction of an experimental database at Hewlett-Packard
Laboratories using the REL ENGLISH software provided by Frederick and Bozena Thompson
of the California Institute of Technology. Of special interest is the quasi-natural
interface and its ability to tolerate ambiguities. This provides a support mechanism
for multiple user views of the same data in which disambiguation is accomplished during
semantic processing.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {86–90},
numpages = {5},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810967,
author = {Gadol, Steve D. and Loebner, Egon E.},
title = {Building and Accessing an REL Database},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810967},
doi = {10.1145/1015579.810967},
abstract = {This paper discusses the construction of an experimental database at Hewlett-Packard
Laboratories using the REL ENGLISH software provided by Frederick and Bozena Thompson
of the California Institute of Technology. Of special interest is the quasi-natural
interface and its ability to tolerate ambiguities. This provides a support mechanism
for multiple user views of the same data in which disambiguation is accomplished during
semantic processing.},
journal = {SIGSOC Bull.},
month = may,
pages = {86–90},
numpages = {5}
}

@inproceedings{10.1145/800276.810968,
author = {Egly, Diana Gail and Wescourt, Keith T.},
title = {Cognitive Style, Categorization, and Vocational Effectss on Performance of REL Database Users},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810968},
doi = {10.1145/800276.810968},
abstract = {Twelve subjects from two job categories, sales engineers and programmer analysts,
used an REL ENGLISH database to answer a set of questions. These questions were designed
to require successively more complex interactions. The database contained Hewlett-Packard's
Condensed Order Records, which were pertinent to the jobs of the sales engineers.All
of the subjects were given a battery of cognitive tests measuring cognitive style
and pattern extrapolation skills prior to using the database. They also received a
brief training session on the structure of the database.Analysis of the subjects interactions
with the REL ENGLISH database, particularly analysis of the errors made, showed: first,
that cognitive style is significantly correlated with the number of questions successfully
completed; second, that while sales engineers were able to access all levels of the
hierarchy in the database, programmer analysts had significantly more difficulty accessing
data from higher levels than they did with data from the same or lower levels than
the standard, entry level; and third, that programmer analysts had less difficulty
with the fixed-format, programming-language-like features of REL ENGLISH, while sales
engineers has less difficulty with the free-format, English-like features of REL ENGLISH.These
findings suggest that quasi-natural language database interfaces are appropriate for
nonprogrammers who have a field-independent cognitive style and who already are domain
experts in the area covered by the database.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {91–97},
numpages = {7},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810968,
author = {Egly, Diana Gail and Wescourt, Keith T.},
title = {Cognitive Style, Categorization, and Vocational Effectss on Performance of REL Database Users},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810968},
doi = {10.1145/1015579.810968},
abstract = {Twelve subjects from two job categories, sales engineers and programmer analysts,
used an REL ENGLISH database to answer a set of questions. These questions were designed
to require successively more complex interactions. The database contained Hewlett-Packard's
Condensed Order Records, which were pertinent to the jobs of the sales engineers.All
of the subjects were given a battery of cognitive tests measuring cognitive style
and pattern extrapolation skills prior to using the database. They also received a
brief training session on the structure of the database.Analysis of the subjects interactions
with the REL ENGLISH database, particularly analysis of the errors made, showed: first,
that cognitive style is significantly correlated with the number of questions successfully
completed; second, that while sales engineers were able to access all levels of the
hierarchy in the database, programmer analysts had significantly more difficulty accessing
data from higher levels than they did with data from the same or lower levels than
the standard, entry level; and third, that programmer analysts had less difficulty
with the fixed-format, programming-language-like features of REL ENGLISH, while sales
engineers has less difficulty with the free-format, English-like features of REL ENGLISH.These
findings suggest that quasi-natural language database interfaces are appropriate for
nonprogrammers who have a field-independent cognitive style and who already are domain
experts in the area covered by the database.},
journal = {SIGSOC Bull.},
month = may,
pages = {91–97},
numpages = {7}
}

@inproceedings{10.1145/800276.810969,
author = {Fenchel, Robert S},
title = {An Integral Approach to User Assistance},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810969},
doi = {10.1145/800276.810969},
abstract = {User assistance is incorporated into some of today's interactive computing systems.
The assistance is rarely consistent in its accuracy, availability, accessibility or
style. In this paper we discuss general requirements for assistance systems and a
characterization of different types of assistance which may be provided users. A technique
for integrating the design of an assistance system with the design of an interactive
computing system is described. The technique satisfies the expressed requirements
and greatly facilitates the development of assistance systems. Finally, a brief discussion
of techniques for evaluating the quality and effectiveness of an interactive assistance
system is presented.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {98–104},
numpages = {7},
keywords = {Interactive assistance, SLR(1) grammars, System design, Context free languages, Help system, Ease of use},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810969,
author = {Fenchel, Robert S},
title = {An Integral Approach to User Assistance},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810969},
doi = {10.1145/1015579.810969},
abstract = {User assistance is incorporated into some of today's interactive computing systems.
The assistance is rarely consistent in its accuracy, availability, accessibility or
style. In this paper we discuss general requirements for assistance systems and a
characterization of different types of assistance which may be provided users. A technique
for integrating the design of an assistance system with the design of an interactive
computing system is described. The technique satisfies the expressed requirements
and greatly facilitates the development of assistance systems. Finally, a brief discussion
of techniques for evaluating the quality and effectiveness of an interactive assistance
system is presented.},
journal = {SIGSOC Bull.},
month = may,
pages = {98–104},
numpages = {7},
keywords = {Interactive assistance, SLR(1) grammars, Help system, Context free languages, System design, Ease of use}
}

@inproceedings{10.1145/800276.810970,
author = {Klensin, John C.},
title = {Short-Term Friendly and Long-Term Hostile?},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810970},
doi = {10.1145/800276.810970},
abstract = {Several authors have suggested, and we are hearing some additional papers on the subject
at this conference, that our computer systems should be "friendly" -- that the new
user, or the infrequent user, should be able to use them quickly, without any special
learning, and without any resort to written materials. My colleagues and I are responsible
for a large analysis system [1, 3] that has been in active use outside its development
group for about five years and which has several philosophically similar predecessor
systems that go back another three or four years [4, 5, 6]. It is interactive in the
sense that one of its reasons for existence is to permit the user to interact with
data and tease results out of them in a variety of ways -- it has never been, nor
is it derived from, a front-end to a batch system or batch thinking. Its users have
ranged in skill and background from the beginning student to the professional statistician
developing new techniques; from the academic researcher to the clerk in commercial
environments. We draw, from this experience, some differing views on what kinds of
system designs are friendly and what sorts of assumptions lead to "friendly" systems.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {105–110},
numpages = {6},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810970,
author = {Klensin, John C.},
title = {Short-Term Friendly and Long-Term Hostile?},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810970},
doi = {10.1145/1015579.810970},
abstract = {Several authors have suggested, and we are hearing some additional papers on the subject
at this conference, that our computer systems should be "friendly" -- that the new
user, or the infrequent user, should be able to use them quickly, without any special
learning, and without any resort to written materials. My colleagues and I are responsible
for a large analysis system [1, 3] that has been in active use outside its development
group for about five years and which has several philosophically similar predecessor
systems that go back another three or four years [4, 5, 6]. It is interactive in the
sense that one of its reasons for existence is to permit the user to interact with
data and tease results out of them in a variety of ways -- it has never been, nor
is it derived from, a front-end to a batch system or batch thinking. Its users have
ranged in skill and background from the beginning student to the professional statistician
developing new techniques; from the academic researcher to the clerk in commercial
environments. We draw, from this experience, some differing views on what kinds of
system designs are friendly and what sorts of assumptions lead to "friendly" systems.},
journal = {SIGSOC Bull.},
month = may,
pages = {105–110},
numpages = {6}
}

@inproceedings{10.1145/800276.810971,
author = {Boynton, G. R.},
title = {The Mini-Micro Connection},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810971},
doi = {10.1145/800276.810971},
abstract = {The office of the future is defined. It is a work station
dominated by a micro computer which is in communication with more
powerful computers, large disks, printers, and other equipment
which can be shared. The large computers, disks, printers, and all
the rest already exist. Micro Computers or desk top computers
already exist. There are only two steps left in realizing the
office of the future. One step involves electronics; establishing
high speed communication between the desk top computer and all of
the other equipment. The second involves programming; defining and
developing coherent software systems. This paper is about the way
in which these two problems were handled by the department of
political science at the university of Iowa.Weeg Computing Center provides academic
computing services for
the University of Iowa. They do this with a collection of
computers; there is an I.B.M. 370, 5 Prime 750s, 4 Hewlett Packard
2000s, and a Vax. There are also disks, plotters, printers, and the
whole panoply of equipment one expects in a university computing
environment. In addition, a Gandalf communication system makes it
possible to access any one of these computers at speeds up to 2400
bits per second. These facilities are normally accessed with the
aid of one of the approximately 750 terminals on campus. With the
support of Weeg computing Center the department of political
science convinced the university administration that it would be
worthwhile experimenting with desk top computers for an entire
department. Money was made available, and 37 computers were
purchased. Which brought us to the two problems: high speed (in
this case 2400 bits per second) communication; and a coherent
system of programs.Commodore 8032s were purchased, and this meant that we needed an
interface which would translate into the serial signal the Gandalf
system used. Several interfaces were available commercially, but we
could not make any of them work at 2400 bits per second. Nor could
we get the terminal emulator programs available commercially to
print the screen at 2400 bits per second. The dominant speed in
micro to larger computer communication is 300 b.p.s., fast means
1200 bits per second. An interface board was designed by the
electronics shop at the University for us, and a machine language
program was written which would handle sending and receiving at the
requisite speed. In principle this seemed a straightforward task.
In practice there was a stream of nitty gritty problems that seemed
as though it would go on forever. But it was done.Three design considerations dominated
the creation of the
software system. One, it had to be as simple to use as possible.
Half of the potential users had never used a computer before. That
implied that the system must be as automatic as possible. Two, it
had to, initially, provide a terminal to each user plus handle word
processing and electronic mail for the department. Three, it had to
allocate tasks between the desk top computers and the Weeg supplied
computers in a way that, within reasonable bounds, maximized the
work done on the desk top computers and minimized use of central
resources.Two features of the system illustrate our attempt to make it as
easy to use as possible. First, signing on to the central computer
is almost automatic. Each person's copy of the machine language
program contains their four codes required to sign on to the
system. The individual can send these codes by pressing the control
key and the up arrow or programs developed for this system will
automatically send these codes. Signing off is equally automatic.
When the Prime on the other end has finished sending or receiving a
program or data it automatically signs off. Second, all choices are
made from two lists. One list is on the Prime, and the other list
is embedded in the software used on the CBM 8032. Physical
contiguity of choices reduces the amount of recall necessary to use
the system.A good screen based text editing program enhances one's ability
to put words together. It does this by making it easy to write and
revise. However, there are many tasks, in addition to writing and
revising, that one needs to be able to carry out with the document
being written. You must be able to save and recall the text. It is
very nice to be able to append a second file to the one being
written. It is very nice to be able to save a segment of the file
being written. And the text must be sent to be printed. All of
these operations can be performed with the aid of the list of
commands in the text editing program. One presses 's' and gives a
file name; the programs do the rest. In addition, one would like to
be able to look at a list of files that have been created and
saved, delete files that are no longer needed, transfer a file to
the disk storage area of a collaborator for his or her review, send
a file (program or program control information) to the batch
processing system, and send a file directly from the disk to be
printed. All of these tasks can be performed using the list of
commands on the Prime. Most of the operations one can imagine
wanting to perform on a text file can be accomplished with one of
the two lists. That makes the system easy to learn; it provides
coherence.In this system the Prime serves as the storage device and the
medium of communication. Programs and text files are stored on the
Prime disk; there are no disks for the desk top computers. In
addition, sending a file to be printed or sending a file to a
collaborator plus electronic mail are handled by the Prime. The
desk top computers handle the writing and revising which is done
with a program written in BASIC to run on these computers. Since
writing is an exceedingly important part of the job of academics
the computers are on all the time. But most of the time they are
not on to the central computing resources; they are working as
stand alone computers.When you walk up and down the hall in the department of
political science you see lots of computers going. Writing has
become much easier. And getting a final document produced has never
been as easy or as fast. The mini-micro connection works.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {111–112},
numpages = {2},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810971,
author = {Boynton, G. R.},
title = {The Mini-Micro Connection},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810971},
doi = {10.1145/1015579.810971},
abstract = {The office of the future is defined. It is a work station
dominated by a micro computer which is in communication with more
powerful computers, large disks, printers, and other equipment
which can be shared. The large computers, disks, printers, and all
the rest already exist. Micro Computers or desk top computers
already exist. There are only two steps left in realizing the
office of the future. One step involves electronics; establishing
high speed communication between the desk top computer and all of
the other equipment. The second involves programming; defining and
developing coherent software systems. This paper is about the way
in which these two problems were handled by the department of
political science at the university of Iowa.Weeg Computing Center provides academic
computing services for
the University of Iowa. They do this with a collection of
computers; there is an I.B.M. 370, 5 Prime 750s, 4 Hewlett Packard
2000s, and a Vax. There are also disks, plotters, printers, and the
whole panoply of equipment one expects in a university computing
environment. In addition, a Gandalf communication system makes it
possible to access any one of these computers at speeds up to 2400
bits per second. These facilities are normally accessed with the
aid of one of the approximately 750 terminals on campus. With the
support of Weeg computing Center the department of political
science convinced the university administration that it would be
worthwhile experimenting with desk top computers for an entire
department. Money was made available, and 37 computers were
purchased. Which brought us to the two problems: high speed (in
this case 2400 bits per second) communication; and a coherent
system of programs.Commodore 8032s were purchased, and this meant that we needed an
interface which would translate into the serial signal the Gandalf
system used. Several interfaces were available commercially, but we
could not make any of them work at 2400 bits per second. Nor could
we get the terminal emulator programs available commercially to
print the screen at 2400 bits per second. The dominant speed in
micro to larger computer communication is 300 b.p.s., fast means
1200 bits per second. An interface board was designed by the
electronics shop at the University for us, and a machine language
program was written which would handle sending and receiving at the
requisite speed. In principle this seemed a straightforward task.
In practice there was a stream of nitty gritty problems that seemed
as though it would go on forever. But it was done.Three design considerations dominated
the creation of the
software system. One, it had to be as simple to use as possible.
Half of the potential users had never used a computer before. That
implied that the system must be as automatic as possible. Two, it
had to, initially, provide a terminal to each user plus handle word
processing and electronic mail for the department. Three, it had to
allocate tasks between the desk top computers and the Weeg supplied
computers in a way that, within reasonable bounds, maximized the
work done on the desk top computers and minimized use of central
resources.Two features of the system illustrate our attempt to make it as
easy to use as possible. First, signing on to the central computer
is almost automatic. Each person's copy of the machine language
program contains their four codes required to sign on to the
system. The individual can send these codes by pressing the control
key and the up arrow or programs developed for this system will
automatically send these codes. Signing off is equally automatic.
When the Prime on the other end has finished sending or receiving a
program or data it automatically signs off. Second, all choices are
made from two lists. One list is on the Prime, and the other list
is embedded in the software used on the CBM 8032. Physical
contiguity of choices reduces the amount of recall necessary to use
the system.A good screen based text editing program enhances one's ability
to put words together. It does this by making it easy to write and
revise. However, there are many tasks, in addition to writing and
revising, that one needs to be able to carry out with the document
being written. You must be able to save and recall the text. It is
very nice to be able to append a second file to the one being
written. It is very nice to be able to save a segment of the file
being written. And the text must be sent to be printed. All of
these operations can be performed with the aid of the list of
commands in the text editing program. One presses 's' and gives a
file name; the programs do the rest. In addition, one would like to
be able to look at a list of files that have been created and
saved, delete files that are no longer needed, transfer a file to
the disk storage area of a collaborator for his or her review, send
a file (program or program control information) to the batch
processing system, and send a file directly from the disk to be
printed. All of these tasks can be performed using the list of
commands on the Prime. Most of the operations one can imagine
wanting to perform on a text file can be accomplished with one of
the two lists. That makes the system easy to learn; it provides
coherence.In this system the Prime serves as the storage device and the
medium of communication. Programs and text files are stored on the
Prime disk; there are no disks for the desk top computers. In
addition, sending a file to be printed or sending a file to a
collaborator plus electronic mail are handled by the Prime. The
desk top computers handle the writing and revising which is done
with a program written in BASIC to run on these computers. Since
writing is an exceedingly important part of the job of academics
the computers are on all the time. But most of the time they are
not on to the central computing resources; they are working as
stand alone computers.When you walk up and down the hall in the department of
political science you see lots of computers going. Writing has
become much easier. And getting a final document produced has never
been as easy or as fast. The mini-micro connection works.},
journal = {SIGSOC Bull.},
month = may,
pages = {111–112},
numpages = {2}
}

@inproceedings{10.1145/800276.810972,
author = {Strand, Paul J.},
title = {A Program for Social Science Computer Literacy},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810972},
doi = {10.1145/800276.810972},
abstract = {A strategy for organizing the social science computer user community is presented.
The strategy recognizes that social scientists have exceptional educational needs
and unfavorable budgetary constraints. A series of workshops is proposed to reduce
curriculum redundancy and avoid the costly "on demand" mode of consultation that has
developed in most computer centers. An example of a workshop is provided.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {113–115},
numpages = {3},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810972,
author = {Strand, Paul J.},
title = {A Program for Social Science Computer Literacy},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810972},
doi = {10.1145/1015579.810972},
abstract = {A strategy for organizing the social science computer user community is presented.
The strategy recognizes that social scientists have exceptional educational needs
and unfavorable budgetary constraints. A series of workshops is proposed to reduce
curriculum redundancy and avoid the costly "on demand" mode of consultation that has
developed in most computer centers. An example of a workshop is provided.},
journal = {SIGSOC Bull.},
month = may,
pages = {113–115},
numpages = {3}
}

@inproceedings{10.1145/800276.810973,
author = {Kehler, Thomas P. and Barnes, Mike},
title = {Interfacing to Text Using HELPME},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810973},
doi = {10.1145/800276.810973},
abstract = {HELPME is a Lisp based system designed to provide on-line help for novice and expert
users of computer systems. HELPME permits the implementation of easy to use interfaces
to existing documents by allowing a user familiar with a document (a 'document expert')
to produce an index and incorporate information relating to the structure of the document
into the interface. A typical user of HELPME can then interact with the document and
index through a series of commands to quickly find the information desired.The primary
advantage of a system like HELPME is that it permits construction of interfaces to
existing on-line documents and provides three modes of interaction with the documents:
simple display, indexed-based query and context overview. Simple display permits forward
and reverse movement through a document while index-based query uses key-words to
select relevant sections of the document hierarchy for display. Context overview permits
a hierarchical view of the document. For example, the table of contents of a document
can be used to construct this hierarchy. Each of these modes of interaction are independent
and may be selected by the user at any point. The goal of HELPME is to allow a user
to find any information in a document relating to the user's requests. Of course,
many users do not have a good grasp on exactly what they are looking for but rely
on inadvertent discovery. It is hoped that the flexibility of a HELPME-like system
will satisfy the goals of an easy-to-use, extensible help system for computing environments.
A long term goal for HELPME is to use domain knowledge and user models in user assistance
and information management.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {116–124},
numpages = {9},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810973,
author = {Kehler, Thomas P. and Barnes, Mike},
title = {Interfacing to Text Using HELPME},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810973},
doi = {10.1145/1015579.810973},
abstract = {HELPME is a Lisp based system designed to provide on-line help for novice and expert
users of computer systems. HELPME permits the implementation of easy to use interfaces
to existing documents by allowing a user familiar with a document (a 'document expert')
to produce an index and incorporate information relating to the structure of the document
into the interface. A typical user of HELPME can then interact with the document and
index through a series of commands to quickly find the information desired.The primary
advantage of a system like HELPME is that it permits construction of interfaces to
existing on-line documents and provides three modes of interaction with the documents:
simple display, indexed-based query and context overview. Simple display permits forward
and reverse movement through a document while index-based query uses key-words to
select relevant sections of the document hierarchy for display. Context overview permits
a hierarchical view of the document. For example, the table of contents of a document
can be used to construct this hierarchy. Each of these modes of interaction are independent
and may be selected by the user at any point. The goal of HELPME is to allow a user
to find any information in a document relating to the user's requests. Of course,
many users do not have a good grasp on exactly what they are looking for but rely
on inadvertent discovery. It is hoped that the flexibility of a HELPME-like system
will satisfy the goals of an easy-to-use, extensible help system for computing environments.
A long term goal for HELPME is to use domain knowledge and user models in user assistance
and information management.},
journal = {SIGSOC Bull.},
month = may,
pages = {116–124},
numpages = {9}
}

@inproceedings{10.1145/800276.810974,
author = {Hiltz, Starr Roxanne and Turoff, Murray},
title = {Human Diversity and the Choice of Interface: A Design Challenge},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810974},
doi = {10.1145/800276.810974},
abstract = {As part of a field trial, the Electronic Information Exchange System (EIES) provided
a variety of interfaces and user aids. Users were permitted to freely choose from
the available variety at any time. They were then asked to report on their frequency
of use of the various alternatives at two points in time. We found that there is no
one style of interface or source of user support which will satisfy all users at any
point in time, or even the same user as experience and familiarity with the system
change. While their generalizability is unknown, our observations suggest that human
helpers (user consultants on EIES) are the single most valued source of user support,
and that system designers should consider incorporating an integrated and somewhat
redundant system of both menus and commands into the interface.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {125–130},
numpages = {6},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810974,
author = {Hiltz, Starr Roxanne and Turoff, Murray},
title = {Human Diversity and the Choice of Interface: A Design Challenge},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810974},
doi = {10.1145/1015579.810974},
abstract = {As part of a field trial, the Electronic Information Exchange System (EIES) provided
a variety of interfaces and user aids. Users were permitted to freely choose from
the available variety at any time. They were then asked to report on their frequency
of use of the various alternatives at two points in time. We found that there is no
one style of interface or source of user support which will satisfy all users at any
point in time, or even the same user as experience and familiarity with the system
change. While their generalizability is unknown, our observations suggest that human
helpers (user consultants on EIES) are the single most valued source of user support,
and that system designers should consider incorporating an integrated and somewhat
redundant system of both menus and commands into the interface.},
journal = {SIGSOC Bull.},
month = may,
pages = {125–130},
numpages = {6}
}

@inproceedings{10.1145/800276.810975,
author = {Loebner, Egon E. and Gadol, Steven D.},
title = {Living Taxonomies in the Corporate World: The Need for Multinested Data Models},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810975},
doi = {10.1145/800276.810975},
abstract = {The complexity of information processing, disseminating and controlling is very high
within a sizable corporation. Database design, targeted to carry out these functions,
is constantly improving. Nevertheless, nonprogrammers have trouble accessing most
databases. Layers of EDP personnel, as well as unresponsive and cumbersome systems,
are an obstacle to effective database use.In this paper, we describe an exploratory
investigation of databases based on REL ENGLISH [1]. In our system, data structures
and access language were designed to map closely the corporate structure and its terminology.
Our test vehicle was a portion of Hewlett-Packard's internal information network,
the corporate Order Processing System. We have identified about a dozen job related
perspectives belonging to geographically dispersed and functionally stratified end-users
within various entities of the HP organization. A multinested data model is an intertwined
hierarchy: the join of separate hierarchies with different lexicons but shared data
events. For our test, we have selected two major intersecting multinested user views:
sales and manufacturing. Our design accommodates users with differing perspectives
of this model.The system data structures were constructed using the REL ENGLISH primitives.
The Condensed Order Records (COR) base spanned a multinested hierarchy four levels
deep for the Sales Organization taxonomy and five levels deep for the Manufactured
Products taxomony. The design permits the user to query the COR base about the data
model itself. He can, of course, also obtain the standard statistical views of the
data.Corporate taxonomies are dynamically changing structures. The database model
needs to reflect this change. In most cases, the user wants to manipulate data at
three levels in his own job taxonomy and at all levels in the other taxonomies. The
multinested data model is needed in order to permit the user to view the data from
the same perspective that he views his job in the corporate organization.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {131–136},
numpages = {6},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810975,
author = {Loebner, Egon E. and Gadol, Steven D.},
title = {Living Taxonomies in the Corporate World: The Need for Multinested Data Models},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810975},
doi = {10.1145/1015579.810975},
abstract = {The complexity of information processing, disseminating and controlling is very high
within a sizable corporation. Database design, targeted to carry out these functions,
is constantly improving. Nevertheless, nonprogrammers have trouble accessing most
databases. Layers of EDP personnel, as well as unresponsive and cumbersome systems,
are an obstacle to effective database use.In this paper, we describe an exploratory
investigation of databases based on REL ENGLISH [1]. In our system, data structures
and access language were designed to map closely the corporate structure and its terminology.
Our test vehicle was a portion of Hewlett-Packard's internal information network,
the corporate Order Processing System. We have identified about a dozen job related
perspectives belonging to geographically dispersed and functionally stratified end-users
within various entities of the HP organization. A multinested data model is an intertwined
hierarchy: the join of separate hierarchies with different lexicons but shared data
events. For our test, we have selected two major intersecting multinested user views:
sales and manufacturing. Our design accommodates users with differing perspectives
of this model.The system data structures were constructed using the REL ENGLISH primitives.
The Condensed Order Records (COR) base spanned a multinested hierarchy four levels
deep for the Sales Organization taxonomy and five levels deep for the Manufactured
Products taxomony. The design permits the user to query the COR base about the data
model itself. He can, of course, also obtain the standard statistical views of the
data.Corporate taxonomies are dynamically changing structures. The database model
needs to reflect this change. In most cases, the user wants to manipulate data at
three levels in his own job taxonomy and at all levels in the other taxonomies. The
multinested data model is needed in order to permit the user to view the data from
the same perspective that he views his job in the corporate organization.},
journal = {SIGSOC Bull.},
month = may,
pages = {131–136},
numpages = {6}
}

@inproceedings{10.1145/800276.810976,
author = {Miller, Lawrence},
title = {A Study of Procedure Descriptions by Non-Programmers (Abstract Only)},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810976},
doi = {10.1145/800276.810976},
abstract = {Providing mechanisms for inexperienced users of computer systems to program the computer
to repetitively perform tasks that the user normally does in his or her daily job
is one of the most challenging tasks for designers of highly interactive computer
systems oriented to naive users. This report presents early results of a study conducted
to ascertain the written analogues of the programming structures iteration, conditional
and variables. The study required users already familiar with office procedures to
practice a routine forms fill-in and data verification task over a period of one week.
At the end of that time, they were required to write a set of procedures as if they
were instructing a new person in the performance of the job. These written protocols
(in conjunction with verbal protocols taken during the learning phase) were analyzed
in terms of the above-mentioned structures.It was found that a variety of structures
are used by naive users, but more importantly, all users made serious errors of both
omission and commission. In particular, events of low probability were not described
at all. In certain cases the written instructions did not correspond with the way
in which users actually performed the tasks.The implications for office systems designers,
amongst others, are explored.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {137},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810976,
author = {Miller, Lawrence},
title = {A Study of Procedure Descriptions by Non-Programmers (Abstract Only)},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810976},
doi = {10.1145/1015579.810976},
abstract = {Providing mechanisms for inexperienced users of computer systems to program the computer
to repetitively perform tasks that the user normally does in his or her daily job
is one of the most challenging tasks for designers of highly interactive computer
systems oriented to naive users. This report presents early results of a study conducted
to ascertain the written analogues of the programming structures iteration, conditional
and variables. The study required users already familiar with office procedures to
practice a routine forms fill-in and data verification task over a period of one week.
At the end of that time, they were required to write a set of procedures as if they
were instructing a new person in the performance of the job. These written protocols
(in conjunction with verbal protocols taken during the learning phase) were analyzed
in terms of the above-mentioned structures.It was found that a variety of structures
are used by naive users, but more importantly, all users made serious errors of both
omission and commission. In particular, events of low probability were not described
at all. In certain cases the written instructions did not correspond with the way
in which users actually performed the tasks.The implications for office systems designers,
amongst others, are explored.},
journal = {SIGSOC Bull.},
month = may,
pages = {137},
numpages = {1}
}

@inproceedings{10.1145/800276.810977,
author = {Marcus, Aaron},
title = {The Graphic Design of Friendly Faces for Information Management (Abstract Only)},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810977},
doi = {10.1145/800276.810977},
abstract = {Principles of graphic design have been utilized in redesigning the interface for Seedis,
a large information management system. The structure and processes of Seedis are briefly
described. The graphic design approach is explained and graphic design principles
are outlined. Examples of enhanced menus, prompts, help messages and data directories
are shown to indicate the nature of improvements.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {137},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810977,
author = {Marcus, Aaron},
title = {The Graphic Design of Friendly Faces for Information Management (Abstract Only)},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810977},
doi = {10.1145/1015579.810977},
abstract = {Principles of graphic design have been utilized in redesigning the interface for Seedis,
a large information management system. The structure and processes of Seedis are briefly
described. The graphic design approach is explained and graphic design principles
are outlined. Examples of enhanced menus, prompts, help messages and data directories
are shown to indicate the nature of improvements.},
journal = {SIGSOC Bull.},
month = may,
pages = {137},
numpages = {1}
}

@inproceedings{10.1145/800276.810978,
author = {Hatfield, Don},
title = {The Coming World of “What You See is What You Get” (Abstract Only)},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810978},
doi = {10.1145/800276.810978},
abstract = {The term 'what you see is what you get' has been used to refer to the editing of fully
formatted documents so that every edit change causes the text to be updated immediately
to show the document as it would appear when printed, thus eliminating the immediate
step of (periodically) invoking a formatter explicitly. This mode of working is generally
agreed to result in more and better results with less effort, both because the real-world
simulation of a document is easier to use than a mixture of format command statements
and unformatted text, and because many errors show up more immediately in a real-world
situation than in a complicated abstraction.What happens if we extend this notion
throughout the interface between the user and the computer? We enter a world of constrained
objects and functional (applicative) actions. If the constraints are algebraic, the
result is VISICALC-Iike. If the constraints are formats, the result is format programs
which are also (unfilled) documents and can be created and edited as document images.
If the constraints are actions themselves, the result is islands of action-programs
in a sea of constraints.We propose, as the user interface, a general constraints language
for documents. The documents are also "templates" or "forms", and have a robustness
that makes them hard to injure. Anything may be represented as a document, from a
memo to a database to a protein molecule. The commands for applying constraints all
take no arguments other than the thing the user is pointing at when the command is
given. The user's world is then like a large Tinkertoy environment, for constructing
active and passive things.Examples of working in this world, in black and white and
in color, will be given covering traditional text operations, the construction and
use of document templates, the equivalent of programming as we know it, the equivalent
of programming as we don't know it, and finally a John Milton template to test the
relation between Paradise Lost and the fundamental theorem of the calculus.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {138},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810978,
author = {Hatfield, Don},
title = {The Coming World of “What You See is What You Get” (Abstract Only)},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810978},
doi = {10.1145/1015579.810978},
abstract = {The term 'what you see is what you get' has been used to refer to the editing of fully
formatted documents so that every edit change causes the text to be updated immediately
to show the document as it would appear when printed, thus eliminating the immediate
step of (periodically) invoking a formatter explicitly. This mode of working is generally
agreed to result in more and better results with less effort, both because the real-world
simulation of a document is easier to use than a mixture of format command statements
and unformatted text, and because many errors show up more immediately in a real-world
situation than in a complicated abstraction.What happens if we extend this notion
throughout the interface between the user and the computer? We enter a world of constrained
objects and functional (applicative) actions. If the constraints are algebraic, the
result is VISICALC-Iike. If the constraints are formats, the result is format programs
which are also (unfilled) documents and can be created and edited as document images.
If the constraints are actions themselves, the result is islands of action-programs
in a sea of constraints.We propose, as the user interface, a general constraints language
for documents. The documents are also "templates" or "forms", and have a robustness
that makes them hard to injure. Anything may be represented as a document, from a
memo to a database to a protein molecule. The commands for applying constraints all
take no arguments other than the thing the user is pointing at when the command is
given. The user's world is then like a large Tinkertoy environment, for constructing
active and passive things.Examples of working in this world, in black and white and
in color, will be given covering traditional text operations, the construction and
use of document templates, the equivalent of programming as we know it, the equivalent
of programming as we don't know it, and finally a John Milton template to test the
relation between Paradise Lost and the fundamental theorem of the calculus.},
journal = {SIGSOC Bull.},
month = may,
pages = {138},
numpages = {1}
}

@inproceedings{10.1145/800276.810979,
author = {Shneiderman, Ben},
title = {Human Factors Studies with System Message Styles (Abstract Only)},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810979},
doi = {10.1145/800276.810979},
abstract = {Computer systems often contain messages which are imprecise ('SYNTAX ERROR'), hostile
('FATAL ERROR, RUN ABORTED'), cryptic ('IEH291H'), or obscure ('CTL DAMAGE, TRANS
ERR'). Such messages may be acceptable to computer professionals who regularly use
a specific system, but they lead to frustration for novices and for professionals
who are using new features or facilities.We have conducted five studies using COBOL
compiler syntax errors and text editor command errors to measure the impact of improving
the wording of system messages. The results indicate that increased specificity, more
positive tone, and greater clarity can improve correction rates and user satisfaction.An
overview of the experimental results will be presented along with guidelines for writing
system messages.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {138},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810979,
author = {Shneiderman, Ben},
title = {Human Factors Studies with System Message Styles (Abstract Only)},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810979},
doi = {10.1145/1015579.810979},
abstract = {Computer systems often contain messages which are imprecise ('SYNTAX ERROR'), hostile
('FATAL ERROR, RUN ABORTED'), cryptic ('IEH291H'), or obscure ('CTL DAMAGE, TRANS
ERR'). Such messages may be acceptable to computer professionals who regularly use
a specific system, but they lead to frustration for novices and for professionals
who are using new features or facilities.We have conducted five studies using COBOL
compiler syntax errors and text editor command errors to measure the impact of improving
the wording of system messages. The results indicate that increased specificity, more
positive tone, and greater clarity can improve correction rates and user satisfaction.An
overview of the experimental results will be presented along with guidelines for writing
system messages.},
journal = {SIGSOC Bull.},
month = may,
pages = {138},
numpages = {1}
}

@inproceedings{10.1145/800276.810980,
author = {Steinhaus, Carolyn P.},
title = {Design Issues for Online Documentation Systems (Abstract Only)},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810980},
doi = {10.1145/800276.810980},
abstract = {The design of an effective interactive documentation system is introduced by tracing
a hypothetical development effort aimed at shifting information contained in printed
volumes of documentation to a form suitable for interactive access. Taking this approach
presents a view of online documentation systems as the result of the process of adapting
information conveyed in printed volumes to the constraint of interactive software
considered as an information medium. The resulting discussion necessarily involves
consideration of the demands which interactive software makes on both the organization
of information about interactive programs and on the cognitive capacities of people
using it.Existing documentation is typically intended to serve all of the informational
needs of any person who uses an interactive software system. The requirements of software
systems for structure and precision demand a more detailed understanding than currently
exists of exactly how to provide information to people of varying levels of experience
with a particular program or with computing in general. The interaction between the
purposes of existing documentation and the requirements of an online system provide
an interesting context for discussion of the major issues facing the designer of an
interactive documentation system.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {139},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810980,
author = {Steinhaus, Carolyn P.},
title = {Design Issues for Online Documentation Systems (Abstract Only)},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810980},
doi = {10.1145/1015579.810980},
abstract = {The design of an effective interactive documentation system is introduced by tracing
a hypothetical development effort aimed at shifting information contained in printed
volumes of documentation to a form suitable for interactive access. Taking this approach
presents a view of online documentation systems as the result of the process of adapting
information conveyed in printed volumes to the constraint of interactive software
considered as an information medium. The resulting discussion necessarily involves
consideration of the demands which interactive software makes on both the organization
of information about interactive programs and on the cognitive capacities of people
using it.Existing documentation is typically intended to serve all of the informational
needs of any person who uses an interactive software system. The requirements of software
systems for structure and precision demand a more detailed understanding than currently
exists of exactly how to provide information to people of varying levels of experience
with a particular program or with computing in general. The interaction between the
purposes of existing documentation and the requirements of an online system provide
an interesting context for discussion of the major issues facing the designer of an
interactive documentation system.},
journal = {SIGSOC Bull.},
month = may,
pages = {139},
numpages = {1}
}

@inproceedings{10.1145/800276.810981,
author = {Haggett, Allan G. and McFadden, John R. and Newsted, Peter R.},
title = {Naive User Behavior in a Restricted Interactive Command Environment (Abstract Only)},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810981},
doi = {10.1145/800276.810981},
abstract = {Results are reported showing the changing pattern of command use by introductory business
data processing students. Using the ability of the University of Calgary's Honeywell
Multics Operating System to tailor a command and response environment, a subset of
commands and responses (called GENIE) was set up in a user-friendly environment to
facilitate novice students programming at CRT terminals. Frequency and time of usage
of all commands was metered and changing patterns of usage emerged as the semester
progressed. For example, "help" usage -- which was originally quite extensive and
broad -- limited itself over time to questions only about specific topics. Reluctance
to use an "audit" facility to capture an interactive session disappeared as the commands
for such usage were likened to a movie camera taking pictures over a student's shoulder.
It is further noted that specific emphasis was placed on simplifying commands and
reducing options.The whole idea of a restricted command environment is compared to
the "abstract machine" concept of Hopper, Kugler, and Unger who are building a universal
command and response language (NICOLA, a NIce Standard COmmand LAnguage). GENIE is
seen as an example of what such an abstract machine could be if the Multics operating
system were viewed as a basic or "parent" abstract machine. Interactive environments
such as Multics provides are viewed as essential to providing a satisfactory timesharing
system for the various, but frequently intermittent uses, in the social sciences.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {139},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810981,
author = {Haggett, Allan G. and McFadden, John R. and Newsted, Peter R.},
title = {Naive User Behavior in a Restricted Interactive Command Environment (Abstract Only)},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810981},
doi = {10.1145/1015579.810981},
abstract = {Results are reported showing the changing pattern of command use by introductory business
data processing students. Using the ability of the University of Calgary's Honeywell
Multics Operating System to tailor a command and response environment, a subset of
commands and responses (called GENIE) was set up in a user-friendly environment to
facilitate novice students programming at CRT terminals. Frequency and time of usage
of all commands was metered and changing patterns of usage emerged as the semester
progressed. For example, "help" usage -- which was originally quite extensive and
broad -- limited itself over time to questions only about specific topics. Reluctance
to use an "audit" facility to capture an interactive session disappeared as the commands
for such usage were likened to a movie camera taking pictures over a student's shoulder.
It is further noted that specific emphasis was placed on simplifying commands and
reducing options.The whole idea of a restricted command environment is compared to
the "abstract machine" concept of Hopper, Kugler, and Unger who are building a universal
command and response language (NICOLA, a NIce Standard COmmand LAnguage). GENIE is
seen as an example of what such an abstract machine could be if the Multics operating
system were viewed as a basic or "parent" abstract machine. Interactive environments
such as Multics provides are viewed as essential to providing a satisfactory timesharing
system for the various, but frequently intermittent uses, in the social sciences.},
journal = {SIGSOC Bull.},
month = may,
pages = {139},
numpages = {1}
}

@inproceedings{10.1145/800276.810982,
author = {Cochran, Susanne S.},
title = {Design Considerations for Data Base Facilities on a Desk Top (Abstract Only)},
year = {1981},
isbn = {0897910648},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.silk.library.umass.edu/10.1145/800276.810982},
doi = {10.1145/800276.810982},
abstract = {The price of computing equipment is decreasing at a rate of about 30% per year and
the cost of professional time is steadily increasing, driving industry to focus on
improving professional productivity.Computer-aided engineering (design, analysis,
research, testing, and planning) is a problem area where professional creativity and
equipment flexibility are of paramount importance to success. Engineers and scientists
are not typically computer professionals; they intimately understand the application
at hand and do not want to he bogged down either with computerese and 25 manuals which
might contain a desired answer, or with explaining enough of the problem to a computer
professional to have the program written by someone else. Ideally, the problem solution
should come from the engineer or scientist when viewed from an efficiency perspective.
In such application areas, price/performance is no longer the primary factor in selecting
computing equipment; ease of adaptability and availability/accessibility are becoming
more important criteria when identifying a computer which can provide effective man/machine
synergy.The HP 9845 Computing System has the HP IMAGE DBM System capability available
as a tool for its users. To help non-computer people to design data bases (the most
difficult and frightening part of using data base), we have created a data base design
kit manual. This manual will guide a user, through either an intuitive or a rigorous
design technique, from problem definition to a working data base diagram. From this
diagram, the user is ready to define, create, and use the data base. For this, we
have developed a general purpose data base management program, called QUERY/45. QUERY/45
can define and create data bases, and also provides updating facilities including
adding, modifying, and deleting information with or without user-defined forms. All
of the helps and teaching tools will enable engineers and scientists to use a data
base without having to write any programs. After they become more experienced, the
helps and menus can be bypassed in favor of formal command mode.The human factors
engineering in the design of this program helps the computer system to become a partner
in problem solving for the engineer or scientist.},
booktitle = {Proceedings of the Joint Conference on Easier and More Productive Use of Computer Systems. (Part - II): Human Interface and the User Interface - Volume 1981},
pages = {140},
location = {Ann Arbor, MI},
series = {CHI '81}
}

@article{10.1145/1015579.810982,
author = {Cochran, Susanne S.},
title = {Design Considerations for Data Base Facilities on a Desk Top (Abstract Only)},
year = {1981},
issue_date = {1982},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {2–3},
issn = {0163-5794},
url = {https://doi-org.silk.library.umass.edu/10.1145/1015579.810982},
doi = {10.1145/1015579.810982},
abstract = {The price of computing equipment is decreasing at a rate of about 30% per year and
the cost of professional time is steadily increasing, driving industry to focus on
improving professional productivity.Computer-aided engineering (design, analysis,
research, testing, and planning) is a problem area where professional creativity and
equipment flexibility are of paramount importance to success. Engineers and scientists
are not typically computer professionals; they intimately understand the application
at hand and do not want to he bogged down either with computerese and 25 manuals which
might contain a desired answer, or with explaining enough of the problem to a computer
professional to have the program written by someone else. Ideally, the problem solution
should come from the engineer or scientist when viewed from an efficiency perspective.
In such application areas, price/performance is no longer the primary factor in selecting
computing equipment; ease of adaptability and availability/accessibility are becoming
more important criteria when identifying a computer which can provide effective man/machine
synergy.The HP 9845 Computing System has the HP IMAGE DBM System capability available
as a tool for its users. To help non-computer people to design data bases (the most
difficult and frightening part of using data base), we have created a data base design
kit manual. This manual will guide a user, through either an intuitive or a rigorous
design technique, from problem definition to a working data base diagram. From this
diagram, the user is ready to define, create, and use the data base. For this, we
have developed a general purpose data base management program, called QUERY/45. QUERY/45
can define and create data bases, and also provides updating facilities including
adding, modifying, and deleting information with or without user-defined forms. All
of the helps and teaching tools will enable engineers and scientists to use a data
base without having to write any programs. After they become more experienced, the
helps and menus can be bypassed in favor of formal command mode.The human factors
engineering in the design of this program helps the computer system to become a partner
in problem solving for the engineer or scientist.},
journal = {SIGSOC Bull.},
month = may,
pages = {140},
numpages = {1}
}

